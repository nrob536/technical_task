library(robis)
library(dplyr)
library(proj4)
{gbif <- occ (query = 'Undaria pinnatifida',
from = 'gbif',
gbifopts = list(publishingCountry="NZ"))
Undaria.gbif <- occ2df(gbif)
rm(gbif)}
Undaria.obis <- occurrence("Undaria pinnatifida",
geometry = "POLYGON ((162.04834 -32.97180,
161.32324 -47.70976, 183.36182 -47.73932,
181.95557 -32.84267, 162.04834 -32.97180))")
Undaria.mbph <- read.csv ("../data/Undaria_Porthole.csv", header = T)
View(Undaria.gbif)
View(Undaria.mbph)
library(spocc)
library(rgbif)
library(robis)
library(dplyr)
library(proj4)
{gbif <- occ (query = 'Undaria pinnatifida',
from = 'gbif',
gbifopts = list(publishingCountry="NZ"))
Undaria.gbif <- occ2df(gbif)
rm(gbif)}
Undaria.obis <- occurrence("Undaria pinnatifida",
geometry = "POLYGON ((162.04834 -32.97180,
161.32324 -47.70976, 183.36182 -47.73932,
181.95557 -32.84267, 162.04834 -32.97180))")
Undaria.mbph <- read.csv ("../data/Undaria_Porthole.csv", header = T)
View(Undaria.gbif)
{data.mbph <- cbind(Undaria.mbph, lon_lat)%>%
select (taxon_name, longitude, latitude)%>%
mutate (source = "MBPH")%>%
rename (scientificName = taxon_name)
data.obis <- Undaria.obis %>%
select (scientificName, decimalLongitude, decimalLatitude)%>%
mutate (source = "OBIS")%>%
rename (c(longitude = decimalLongitude, latitude = decimalLatitude))
data.gbif <- Undaria.gbif %>%
mutate (scientificName = "Undaria pinnatifida", source = "GBIF")%>%
select(scientificName, longitude, latitude, source)
}
{proj4 <- "+proj=tmerc +lat_0=0 +lon_0=173 +k=0.9996 +x_0=1600000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs "
x_y <- Undaria.mbph[,26:27]
lon_lat <- as.data.frame(project(x_y, proj4, inverse=T)) %>%
rename(c(longitude = x, latitude = y))
}
{data.mbph <- cbind(Undaria.mbph, lon_lat)%>%
select (taxon_name, longitude, latitude)%>%
mutate (source = "MBPH")%>%
rename (scientificName = taxon_name)
data.obis <- Undaria.obis %>%
select (scientificName, decimalLongitude, decimalLatitude)%>%
mutate (source = "OBIS")%>%
rename (c(longitude = decimalLongitude, latitude = decimalLatitude))
data.gbif <- Undaria.gbif %>%
mutate (scientificName = "Undaria pinnatifida", source = "GBIF")%>%
select(scientificName, longitude, latitude, source)
}
UndariaNZ <- rbind(data.mbph, data.obis, data.gbif)
View(UndariaNZ)
knitr::opts_chunk$set(echo = FALSE)
source("../code/params.R")
print_coast <- latticeExtra::layer(sp.lines(coast_sp, lwd=0.05, col='black',alpha=0.8))
install.packages("latticeExtra")
print_coast <- latticeExtra::layer(sp.lines(coast_sp, lwd=0.05, col='black',alpha=0.8))
print_coast
ggplot()+
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')
library(ggplot2)
ggplot()+
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')
Undaria.occ <- rbind(data.mbph, data.obis, data.gbif)
ggplot()+
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')
View(Undaria.occ)
{gbif <- occ (query = 'Undaria pinnatifida',
from = 'gbif',
gbifopts = list(publishingCountry="NZ"))
gbif <- occ2df(gbif)}
{gbif <- occ (query = 'Undaria pinnatifida',
from = 'gbif',
gbifopts = list(publishingCountry="NZ"))
gbif <- occ2df(gbif)}
obis <- occurrence("Undaria pinnatifida",
geometry = polygon)
mbph <- read.csv ("../data/Undaria_Porthole.csv", header = T)
lapply(list(gbif[1:3],obis[c(8,11,29)],mbph[c(12,6,7)]), head)
x_y <- mbph[,26:27]
lon_lat <- as.data.frame(project(x_y, proj4, inverse=T)) %>%
rename(c(longitude = x, latitude = y))
mbph <- cbind(mbph, lon_lat)
data.mbph <- mbph %>%
mutate (source = "MBPH")%>%
rename (c(scientificName = taxon_name, decimalLongitude = longitude,decimalLatitude = latitude))%>%
select (col.names)
data.obis <- obis %>%
mutate (source = "OBIS")%>%
select (col.names)
data.gbif <- gbif %>%
mutate (scientificName = "Undaria pinnatifida", source = "GBIF")%>%
rename (c(decimalLongitude = longitude,decimalLatitude = latitude))%>%
select(col.names)
Undaria.occ <- rbind(data.mbph, data.obis, data.gbif)
map_leaflet(Undaria.occ)
ggplot()+
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')
NZmap <- map_data("country", "New Zealand")
NZmap <- map_data("Country", "New Zealand")
NZmap <- map_data("Country", "NZL")
NZmap <- map_data("New Zealand")
NZmap <- map_data("NZL")
library(tmap)
install.packages("tmap")
library(tmap)
ggplot()+
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')+
tm_shape(nz) +
tm_borders()
map_nz1 = map_nz +
tm_shape(nz_elev) + tm_raster(alpha = 0.7)
library(sf)
library(terra)
library(spData)
install.packages("spData")
library(sf)
library(terra)
library(spData)
map_nz1 = map_nz +
tm_shape(nz_elev) + tm_raster(alpha = 0.7)
tmap_mode ("plot")
data("World")
tm_shape(World)
tm_shape("World")
data("World")
tmap_mode("plot")
data(World)
tm_shape(World) +
tm_polygons("HPI")
tmap_mode("plot")
data(World)
tm_shape(World) +
tm_points(Undaria.occ)
tm_shape(World) +
tm_point(Undaria.occ)
tmap_mode("plot")
data(World)
tm_shape(World) +
tm_polygons("HPI")
tm_shape(World) +
tm_polygons("HPI")+
ggplot()+
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')
NZmap <- map_data("World")
NZmap <- map_data("world")
View(NZmap)
View(NZmap)
NZmap <- map_data("world")%>%
filter (region == 'New Zealand')
View(NZmap)
ggplot(data = world, aes(x = long, y = lat, group = group)) +
geom_polygon()
ggplot(data = NZmap, aes(x = long, y = lat, group = group)) +
geom_polygon()
View(NZmap)
NZmap <- map_data("world")%>%
filter (region == 'New Zealand' | subregion == "North Island" && "South Island")
NZmap <- map_data("world")%>%
filter (region == 'New Zealand' & subregion %in% "North Island" , "South Island")
NZmap <- map_data("world")%>%
filter (region == 'New Zealand' & subregion %in% c("North Island" , "South Island"))
View(NZmap)
ggplot(data = NZmap, aes(x = long, y = lat, group = group)) +
geom_polygon()
install.packages("spDataLarge")
install.packages("spDataLarge", repos = "https://geocompr.r-universe.dev")
library(spDataLarge)
NZmap <- map_data("world")%>%
filter (region == 'New Zealand' & subregion %in% c("North Island" , "South Island"))
ggplot(data = NZmap, aes(x = long, y = lat, group = group)) +
geom_polygon()
tm_shape(World) +
tm_polygons("HPI")+
ggplot()+
geom_polygon(data = NZmap, aes(x = long, y= lat, group = group)) +
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')
ggplot()+
geom_polygon(data = NZmap, aes(x = long, y= lat, group = group)) +
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')
ggplot()+
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')+
geom_polygon(data = NZmap, aes(x = long, y= lat, group = group))
ggplot(data = NZmap, aes(x = long, y = lat, group = group)) +
geom_polygon() +
xlim <- c(164,186)
ggplot(data = NZmap, aes(x = long, y = lat, group = group)) +
geom_polygon() +
xlim <- c(164,186)
xlim <- c(164,186)
xlim <- c(164,186)
ylim <- c(-54,-33)
ggplot()+
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')+
geom_polygon(data = NZmap, aes(x = long, y= lat, group = group)) +
coord_sf (xlim = xlim, ylim = ylim)
ggplot()+
geom_polygon(data = NZmap, aes(x = long, y= lat, group = group)) +
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')+
coord_sf (xlim = xlim, ylim = ylim)
myTheme=theme_bw()+
theme(axis.title.x = element_blank(),
axis.text.x  = element_text(family="Times",color="Black",vjust=0.5,size=10),
axis.title.y = element_blank(),
axis.text.y  = element_text(family="Times",colour="Black",
size=10,
vjust=0.5,
hjust=0),
panel.grid.major = element_blank(),
panel.grid.minor =element_blank(),
plot.title=element_blank(),
legend.position = c(0.8,0.2),
legend.title = element_text(size=10,family="Times"),
legend.text=element_text(size = 10, family = 'Times'),
legend.key.size = unit(0.6, 'cm'),
legend.key.width = unit(0.6, 'cm'),
legend.background = element_blank())
ggplot()+
geom_polygon(data = NZmap, aes(x = long, y= lat, group = group)) +
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')+
coord_sf (xlim = xlim, ylim = ylim)+
myTheme
xlim <- c(164,180)
ylim <- c(-54,-33)
myTheme=theme_bw()+
theme(axis.title.x = element_blank(),
axis.text.x  = element_text(family="Times",color="Black",vjust=0.5,size=10),
axis.title.y = element_blank(),
axis.text.y  = element_text(family="Times",colour="Black",
size=10,
vjust=0.5,
hjust=0),
panel.grid.major = element_blank(),
panel.grid.minor =element_blank(),
plot.title=element_blank(),
legend.position = c(0.8,0.2),
legend.title = element_text(size=10,family="Times"),
legend.text=element_text(size = 10, family = 'Times'),
legend.key.size = unit(0.6, 'cm'),
legend.key.width = unit(0.6, 'cm'),
legend.background = element_blank())
ggplot()+
geom_polygon(data = NZmap, aes(x = long, y= lat, group = group)) +
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')+
coord_sf (xlim = xlim, ylim = ylim)+
myTheme
xlim <- c(164,180)
ylim <- c(-48,-34)
myTheme=theme_bw()+
theme(axis.title.x = element_blank(),
axis.text.x  = element_text(family="Times",color="Black",vjust=0.5,size=10),
axis.title.y = element_blank(),
axis.text.y  = element_text(family="Times",colour="Black",
size=10,
vjust=0.5,
hjust=0),
panel.grid.major = element_blank(),
panel.grid.minor =element_blank(),
plot.title=element_blank(),
legend.position = c(0.8,0.2),
legend.title = element_text(size=10,family="Times"),
legend.text=element_text(size = 10, family = 'Times'),
legend.key.size = unit(0.6, 'cm'),
legend.key.width = unit(0.6, 'cm'),
legend.background = element_blank())
ggplot()+
geom_polygon(data = NZmap, aes(x = long, y= lat, group = group)) +
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')+
coord_sf (xlim = xlim, ylim = ylim)+
myTheme
xlim <- c(165,179)
ylim <- c(-47,-35)
myTheme=theme_bw()+
theme(axis.title.x = element_blank(),
axis.text.x  = element_text(family="Times",color="Black",vjust=0.5,size=10),
axis.title.y = element_blank(),
axis.text.y  = element_text(family="Times",colour="Black",
size=10,
vjust=0.5,
hjust=0),
panel.grid.major = element_blank(),
panel.grid.minor =element_blank(),
plot.title=element_blank(),
legend.position = c(0.8,0.2),
legend.title = element_text(size=10,family="Times"),
legend.text=element_text(size = 10, family = 'Times'),
legend.key.size = unit(0.6, 'cm'),
legend.key.width = unit(0.6, 'cm'),
legend.background = element_blank())
ggplot()+
geom_polygon(data = NZmap, aes(x = long, y= lat, group = group)) +
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')+
coord_sf (xlim = xlim, ylim = ylim)+
myTheme
xlim <- c(165,179)
ylim <- c(-47,-34)
myTheme=theme_bw()+
theme(axis.title.x = element_blank(),
axis.text.x  = element_text(family="Times",color="Black",vjust=0.5,size=10),
axis.title.y = element_blank(),
axis.text.y  = element_text(family="Times",colour="Black",
size=10,
vjust=0.5,
hjust=0),
panel.grid.major = element_blank(),
panel.grid.minor =element_blank(),
plot.title=element_blank(),
legend.position = c(0.8,0.2),
legend.title = element_text(size=10,family="Times"),
legend.text=element_text(size = 10, family = 'Times'),
legend.key.size = unit(0.6, 'cm'),
legend.key.width = unit(0.6, 'cm'),
legend.background = element_blank())
ggplot()+
geom_polygon(data = NZmap, aes(x = long, y= lat, group = group)) +
geom_point(data= Undaria.occ,
mapping = aes(x = decimalLongitude,
y = decimalLatitude),
colour = 'red')+
coord_sf (xlim = xlim, ylim = ylim)+
myTheme
library(dismo)
install.packages("dismo")
library(spDataLarge)
files <- list.files(path=paste(system.file(package="dismo"), '/ex',
sep=''),  pattern='grd',  full.names=TRUE )
mask <- raster(files[1])
library(raster)
mask <- raster(files[1])
set.seed(1963)
bg <- randomPoints (mask,500)
bg <- random_points (mask,500)
bg <- randomPoints (mask,500)
bg <- raster::randomPoints (mask,500)
bg <- dismo::randomPoints (mask,500)
View(bg)
plot(!is.na(mask), legend=FALSE)
points(bg, cex=0.5)
par(mfrow=c(1,2))
plot(!is.na(mask), legend=FALSE)
Undaria.occ <- rbind(data.mbph, data.obis, data.gbif)%>%
mutate(occ = 1)
View(Undaria.occ)
myRespName1='Asian kelp'
myResp1=(as.numeric(Undaria.occ[,"occ"]))
View(Undaria.occ)
myRespXY1=Undaria.occ[2:3]
View(myRespXY1)
# Formating the data #
Data1=BIOMOD_FormatingData(resp.var = myResp1,
expl.var=env2000b,
resp.xy=myRespXY1,
resp.nam= 'Asian kelp',
PA.nb.rep = 1,
PA.strategy = 'sre',
PA.sre.quant = 0.025,
PA.nb.absences = 1200,
na.rm = T)
install.packages("biomod2")
library(biomod2)
# Formating the data #
Data1=BIOMOD_FormatingData(resp.var = myResp1,
expl.var=env2000b,
resp.xy=myRespXY1,
resp.nam= 'Asian kelp',
PA.nb.rep = 1,
PA.strategy = 'sre',
PA.sre.quant = 0.025,
PA.nb.absences = 1200,
na.rm = T)
# Formating the data #
Data1=BIOMOD_FormatingData(resp.var = myResp1,
#expl.var=env2000b,
resp.xy=myRespXY1,
resp.nam= 'Asian kelp',
PA.nb.rep = 1,
PA.strategy = 'sre',
PA.sre.quant = 0.025,
PA.nb.absences = 1200,
na.rm = T)
install.packages("sdmspredictors")
load_layers(layers[layers$name %in% c("pH", "Salinity") &
layers$dataset_code == "Bio-ORACLE",], datadir = tempdir())
library(sdmpredictors)
install.packages("sdmpredictors")
library(sdmpredictors)
load_layers(layers[layers$name %in% c("pH", "Salinity") &
layers$dataset_code == "Bio-ORACLE",], datadir = tempdir())
layers <- list_layers(datasets)
datasets <- list_datasets(terrestrial = FALSE, marine = TRUE)
layers <- list_layers(datasets)
load_layers(layers[layers$name %in% c("pH", "Salinity") &
layers$dataset_code == "Bio-ORACLE",], datadir = tempdir())
View(datasets)
View(layers)
datasets <- list_datasets(terrestrial = FALSE, marine = TRUE)
layers <- list_layers(datasets)
load_layers(layers[layers$code %in% c("BO22_ph",
"BO_dissox",
"BO_nitrate",
"BO_salinity",
"BO_sstmax",
"BO_sstmean",
"BO_sstmin") &
layers$dataset_code == "Bio-ORACLE",], datadir = tempdir())
datasets <- list_datasets(terrestrial = FALSE, marine = TRUE)
layers <- list_layers(datasets)
load_layers(layers[layers$Layer_code %in% c("BO22_ph",
"BO_dissox",
"BO_nitrate",
"BO_salinity",
"BO_sstmax",
"BO_sstmean",
"BO_sstmin") &
layers$dataset_code == "Bio-ORACLE",], datadir = tempdir())
load_layers(layers[layers$Layer_code %in% c("BO_ph",
"BO_dissox",
"BO_nitrate",
"BO_salinity",
"BO_sstmax",
"BO_sstmean",
"BO_sstmin") &
layers$dataset_code == "Bio-ORACLE",], datadir = tempdir())
load_layers(layers[layers$Layer_code %in% c("BO22_ph",
"BO_dissox",
"BO_nitrate",
"BO_salinity",
"BO_sstmax",
"BO_sstmean",
"BO_sstmin") &
layers$dataset_code == "Bio-ORACLE",], datadir = tempdir())
datasets <- list_datasets(terrestrial = FALSE, marine = TRUE)
layers <- list_layers(datasets)
load_layers(layers[layers$Layer_code %in% c("BO22_ph",
"BO_dissox",
"BO_nitrate",
"BO_salinity",
"BO_sstmax",
"BO_sstmean",
"BO_sstmin") &
layers$dataset_code == "Bio-ORACLE",], datadir = tempdir())
load_layers(layers[layers$Layer_code %in% c("BO_ph",
"BO_dissox",
"BO_nitrate",
"BO_salinity",
"BO_sstmax",
"BO_sstmean",
"BO_sstmin") &
layers$dataset_code == "Bio-ORACLE",], datadir = tempdir())
load_layers(layers[layers$layer_code %in% c("BO_ph",
"BO_dissox",
"BO_nitrate",
"BO_salinity",
"BO_sstmax",
"BO_sstmean",
"BO_sstmin") &
layers$dataset_code == "Bio-ORACLE",], datadir = tempdir())
